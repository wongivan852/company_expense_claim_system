# Generated by Django 4.2.7 on 2025-08-19 07:46

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "employee_id",
                    models.CharField(
                        help_text="Unique employee identifier",
                        max_length=20,
                        unique=True,
                        verbose_name="Employee ID",
                    ),
                ),
                (
                    "department",
                    models.CharField(
                        blank=True,
                        help_text="Employee's department",
                        max_length=100,
                        verbose_name="Department",
                    ),
                ),
                (
                    "position",
                    models.CharField(
                        blank=True,
                        help_text="Employee's job position",
                        max_length=100,
                        verbose_name="Position",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("staff", "Staff"),
                            ("manager", "Manager"),
                            ("admin", "Admin"),
                        ],
                        default="staff",
                        help_text="User role for permissions",
                        max_length=10,
                        verbose_name="Role",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        choices=[
                            ("hk", "Hong Kong"),
                            ("cn", "China"),
                            ("other", "Other"),
                        ],
                        default="hk",
                        help_text="Primary work location",
                        max_length=10,
                        verbose_name="Location",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="Phone Number"
                    ),
                ),
                (
                    "preferred_language",
                    models.CharField(
                        choices=[("en", "English"), ("zh-hans", "Simplified Chinese")],
                        default="en",
                        max_length=10,
                        verbose_name="Preferred Language",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(auto_now_add=True, verbose_name="Date Joined"),
                ),
                (
                    "last_login_ip",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="Last Login IP"
                    ),
                ),
                (
                    "two_factor_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Enable two-factor authentication",
                        verbose_name="Two Factor Authentication",
                    ),
                ),
                (
                    "failed_login_attempts",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Failed Login Attempts"
                    ),
                ),
                (
                    "account_locked_until",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Account Locked Until"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "manager",
                    models.ForeignKey(
                        blank=True,
                        help_text="Direct manager for approval workflow",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managed_employees",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Manager",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "ordering": ["last_name", "first_name"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="avatars/",
                        verbose_name="Avatar",
                    ),
                ),
                (
                    "bio",
                    models.TextField(blank=True, max_length=500, verbose_name="Bio"),
                ),
                (
                    "birthday",
                    models.DateField(blank=True, null=True, verbose_name="Birthday"),
                ),
                (
                    "emergency_contact_name",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        verbose_name="Emergency Contact Name",
                    ),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        verbose_name="Emergency Contact Phone",
                    ),
                ),
                (
                    "email_notifications",
                    models.BooleanField(
                        default=True,
                        help_text="Receive email notifications for claim updates",
                        verbose_name="Email Notifications",
                    ),
                ),
                (
                    "sms_notifications",
                    models.BooleanField(
                        default=False,
                        help_text="Receive SMS notifications for urgent updates",
                        verbose_name="SMS Notifications",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Profile",
                "verbose_name_plural": "User Profiles",
            },
        ),
        migrations.CreateModel(
            name="LoginHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ip_address", models.GenericIPAddressField(verbose_name="IP Address")),
                ("user_agent", models.TextField(blank=True, verbose_name="User Agent")),
                (
                    "login_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="Login Time"),
                ),
                ("success", models.BooleanField(default=True, verbose_name="Success")),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="login_history",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Login History",
                "verbose_name_plural": "Login Histories",
                "ordering": ["-login_time"],
            },
        ),
    ]
